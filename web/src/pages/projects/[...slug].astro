---
import Layout from "../../layouts/Layout.astro";
import {
  getProjectPageData,
  getNextProject,
  getSiteSettings,
} from "../../sanity/api";
import PortableText from "../../components/utils/portableText.astro";
import { Image } from "astro:assets";
import EpisodePlayer from "../../components/projects/episodePlayer.astro";
import ProjectMedia from "../../components/projects/projectMedia.astro";
import CornerTopLeft from "../../components/cornerPieces/cornerTopLeft.astro";
import CornerBottomRight from "../../components/cornerPieces/cornerBottomRight.astro";
import CornerBottomLeft from "../../components/cornerPieces/cornerBottomLeft.astro";
import CornerTopRight from "../../components/cornerPieces/cornerTopRight.astro";
import Footer from "../../components/footer.astro";
import NextProject from "../../components/projects/nextProject.astro";

const pages = await getProjectPageData();
const settingsData = await getSiteSettings();

const { slug } = Astro.params;
const page = pages.find((page) => page.slug === slug);
if (!page) return Astro.redirect("/404");

const {
  title,
  awardArray,
  awardImageArray,
  clientArray,
  creditsArray,
  servicesArray,
  description,
  secondaryDescription,
  thumbnail,
  previewUrl,
  previewUrlMobile,
  video,
  episodeArray,
  mediaArray,
} = page;

const currentProjectTitle = title;
const nextProjectData = await getNextProject(currentProjectTitle);

// if (nextProjectData) {
//   console.log("Next project data:", nextProjectData);
// } else {
//   console.log("No next project found.");
// }
---

<Layout data={settingsData}>
  <section class="main-video__wrapper">
    <video
      class=`main-video ${video && 'hover-area'}`
      data-hover-text="Play video"
      id="shortVideo"
      autoplay
      muted
      loop
      playsinline
      data-has-full-length-video=`${video != null}`
    >
      <source src={previewUrl} type="video/mp4" media="(min-width: 992px)" />
      <source
        src={previewUrlMobile ? previewUrlMobile : previewUrl}
        type="video/mp4"
      />
      Your browser does not support the video tag.
    </video>
    {
      video && (
        <video class="main-video" id="fullVideo" controls>
          <source src={video} type="video/mp4" />
          Your browser does not support the video tag.
        </video>
      )
    }
    <div class="main-video__mobile-wrapper">
      <div class="main-video__mobile-title">
        <h1>
          {title}
        </h1>
        {
          clientArray != null &&
            clientArray.map((client) => {
              return <small>{client}</small>;
            })
        }
      </div>
      <svg
        class="arrow-svg"
        viewBox="0 0 50 50"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle cx="25" cy="25" r="24" stroke="#EFEDED"></circle>
        <path
          d="M25 20V30.3333M25 30.3333L21 26.3333M25 30.3333L29 26.3333"
          stroke="#EFEDED"></path>
      </svg>
    </div>
  </section>
  <section class="project-details__wrapper">
    <div class="project-details__flex">
      <div class="project-details-left">
        <div>
          <h1>{title}</h1>
          {
            clientArray != null && (
              <div class="project-details-item clients-item">
                <p class="item-title">
                  {clientArray.length > 1 ? "Clients" : "Client"}
                </p>
                {clientArray.map((client) => {
                  return <p>{client}</p>;
                })}
              </div>
            )
          }
        </div>
        <div class="project-details-left-bottom">
          {
            awardArray != null && (
              <>
                <p class="item-title">
                  Awards & Recognitions
                  {/* {awardArray.length > 1 ? "Awards" : "Awards"} */}
                </p>
                <div class="project-details-item item-two-col">
                  {awardArray.map((award) => {
                    return <p>{award}</p>;
                  })}
                </div>
              </>
            )
          }
          {
            awardImageArray != null && (
              <div class="project-details-awards-images">
                {awardImageArray.map((award) => {
                  return (
                    <Image
                      quality={25}
                      inferSize
                      src={award.imageSrc}
                      alt="Image of an award badge"
                      class="award-image"
                    />
                  );
                })}
              </div>
            )
          }
        </div>
      </div>
      <div class="project-details-right">
        {
          description != null && (
            <div class="project-details-overview">
              <h5>Project Overview</h5>
              <p class="project-details-overview-text">
                <PortableText data={description} />
              </p>
            </div>
          )
        }
        <div class="project-details-credits">
          {
            servicesArray != null && (
              <div class="project-details-item">
                <p class="item-title">Services</p>
                {servicesArray.map((service) => {
                  return <p>{service}</p>;
                })}
              </div>
            )
          }
          {
            creditsArray != null && (
              <div class="project-details-item">
                <p class="item-title">Credits</p>
                {creditsArray.map((credit) => {
                  return <p>{credit}</p>;
                })}
              </div>
            )
          }
        </div>
        <div class="project-details-mobile-awards">
          {
            awardArray != null && (
              <div class="project-details-mobile-awards-wrapper">
                <p class="item-title">
                  Awards & Recognitions
                  {/* {awardArray.length > 1 ? "Awards" : "Awards"} */}
                </p>
                <div class="project-details-item item-two-col">
                  {awardArray.map((award) => {
                    return <p>{award}</p>;
                  })}
                </div>
              </div>
            )
          }
          {
            awardImageArray != null && (
              <div class="project-details-awards-images">
                {awardImageArray.map((award) => {
                  return (
                    <Image
                      quality={25}
                      inferSize
                      src={award.imageSrc}
                      alt="Image of an award badge"
                      class="award-image"
                    />
                  );
                })}
              </div>
            )
          }
        </div>
      </div>
    </div>
  </section>
  {
    episodeArray != null && (
      <section class="episode__wrapper">
        <EpisodePlayer episodeData={episodeArray} />
      </section>
    )
  }
  {
    secondaryDescription != null && (
      <section class="project-overview__wrapper">
        <div class="project-overview-text">
          <PortableText data={secondaryDescription} />
        </div>
      </section>
    )
  }
  {
    mediaArray !== null && (
      <section class="project-media__wrapper">
        <CornerTopLeft />
        <CornerTopRight />
        <CornerBottomLeft />
        <CornerBottomRight />
        <ProjectMedia mediaArray={mediaArray} />
      </section>
    )
  }
  <div class="woe-monogram__wrapper">
    <video
      class="blend-video"
      playsinline
      muted
      autoplay
      loop
      src={settingsData.logoVideo}
    >
    </video>
  </div>
  {
    nextProjectData !== null && (
      <section class="next-project">
        <NextProject nextProjectData={nextProjectData} />
      </section>
    )
  }
  <Footer data={settingsData} />
</Layout>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const shortVideo = document.getElementById("shortVideo");
    const fullVideoExists = shortVideo.getAttribute(
      "data-has-full-length-video"
    );

    // Function to toggle playsinline attribute
    function togglePlaysinline() {
      const isMobile =
        /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
          navigator.userAgent
        );

      if (isMobile) {
        shortVideo.setAttribute("playsinline", "");
      } else {
        shortVideo.removeAttribute("playsinline");
      }
    }

    // Call the function to set initial state
    togglePlaysinline();

    // Add resize listener to handle orientation changes
    window.addEventListener("resize", togglePlaysinline);

    if (fullVideoExists !== "false") {
      const fullVideo = document.getElementById("fullVideo");
      shortVideo.addEventListener("click", () => {
        // Hide the short video
        shortVideo.style.display = "none";
        // Show the full video
        fullVideo.style.display = "block";
        // Start playing the full video
        fullVideo.play();
      });
    }
  });
</script>

<style>
  .woe-monogram__wrapper {
    width: 100%;
    display: grid;
    place-items: center;
  }
  .blend-video {
    z-index: 0;
    position: relative;
    mix-blend-mode: lighten;
    user-select: none;
    pointer-events: none;
    aspect-ratio: 800/544;
    max-width: 80vw;
    margin: 0 auto;
  }
  .main-video__wrapper {
    position: relative;
    width: 100%;
    height: 80vh;
  }
  .main-video {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  #fullVideo {
    display: none;
  }

  .project-details__wrapper {
    color: var(--white);
    margin: 4rem;
  }
  .project-details__flex {
    display: flex;
    justify-content: space-between;
  }
  .project-details-left {
    flex: 2;
    display: flex;
    justify-content: space-between;
    flex-direction: column;
    h1 {
      max-width: 60%;
    }
  }

  .project-details-left-bottom {
    margin-top: 4rem;
  }

  .item-two-col {
    column-count: 2;
    column-gap: 1.5rem;
    width: 500px;
  }

  .project-details-awards-images {
    margin-top: 2rem;
    display: flex;
    flex-wrap: wrap;
    gap: 2rem;
    opacity: 0.5;
    max-width: 40vw;
    border: 1px solid red;
  }
  .award-image {
    height: 100px;
    width: auto;
  }

  .project-details-right {
    color: var(--white);
    flex: 1;
    display: flex;
    justify-content: space-between;
    flex-direction: column;
  }
  .project-details-overview {
    & h5 {
      margin-bottom: 2rem;
    }
  }
  .project-details-credits {
    margin-top: 2rem;
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: 2rem;
  }
  .project-details-item {
    color: rgba(var(--rgb-white), 0.5);
  }
  .clients-item {
    margin-top: 2rem;
  }
  .item-title {
    color: var(--white);
    margin-bottom: 1rem;
  }

  .episode__wrapper {
    position: relative;
    width: 100%;
  }
  .project-overview__wrapper {
    color: var(--white);
    width: var(--inner-width);
    margin: 4rem auto;
  }
  .project-overview-text {
    margin-top: 2rem;
    column-count: 3;
    column-gap: 1.5rem;
    width: 100%;
  }
  .project-media__wrapper {
    position: relative;
    width: calc(100% - 1rem * 2);
    margin: 1rem;
  }
  .next-project {
    position: relative;
  }
  .main-video__mobile-wrapper {
    display: none;
    width: calc(100% - 2rem);
    justify-content: space-between;
    align-items: flex-end;
    position: absolute;
    bottom: 1.5rem;
    left: 50%;
    transform: translateX(-50%);
    color: var(--white);
  }
  .arrow-svg {
    min-width: 50px;
    height: 50px;
  }
  .main-video__mobile-title {
    display: flex;
    flex-direction: column-reverse;
    h1 {
      margin-top: 0.75rem;
    }
  }

  .project-details-mobile-awards {
    display: none;
  }
  @media (max-width: 992px) {
    .main-video__wrapper {
      height: 100svh;
    }
    .project-details-left {
      display: none;
    }
    .project-details__wrapper,
    .project-overview__wrapper {
      margin: 1rem;
    }
    .project-details__wrapper {
      margin-bottom: 4rem;
    }
    .project-overview-text {
      column-count: 1;
    }
    .sticky-gradient {
      display: none;
    }
    .main-video__mobile-wrapper {
      display: flex;
    }
  }
  .project-details-mobile-awards {
    display: block;
    position: relative;
    width: 100%;
  }
  .project-details-mobile-awards-wrapper {
    width: 100%;
    margin-top: 2rem;
    position: relative;
  }
  .item-two-col {
    width: 100%;
    column-gap: 2rem;
    /* matches 2rem gap for .project-details-credits */
  }
  .project-details-item {
    flex: 1;
  }
  .project-details-awards-images {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    gap: 2rem;
    opacity: 0.5;
    width: 100%;
    max-width: 95vw;
  }
  .award-image {
    height: 60px;
    width: auto;
  }
</style>
