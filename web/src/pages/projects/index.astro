---
import { Image } from "astro:assets";
import Layout from "../../layouts/Layout.astro";
import { getProjectsInOrder, getSiteSettings } from "../../sanity/api";
import CornerTopLeft from "../../components/cornerPieces/cornerTopLeft.astro";
import CornerTopRight from "../../components/cornerPieces/cornerTopRight.astro";
import CornerBottomLeft from "../../components/cornerPieces/cornerBottomLeft.astro";
import CornerBottomRight from "../../components/cornerPieces/cornerBottomRight.astro";
import Footer from "../../components/footer.astro";
import PageTransition from "../../components/pageTransition.astro";

const allProjectData = await getProjectsInOrder();
const settingsData = await getSiteSettings();

const data = allProjectData.projects;
---

<Layout
  title="Projects | WOE Studio"
  data={settingsData}
  description="Explore the Projects page of WOE (What On Earth). Discover our portfolio showcasing select projects from captivating commercials to compelling documentaries, see how our unique approach transforms ideas into impactful visuals."
>
  <PageTransition />
  <div class="project-grid__container">
    <div class="project-entries-container">
      {
        data.map((data, i) => {
          const mobileThumbnail = data.thumbnail;
          const itemSpansTwoCols = i % 5 === 0;
          const className = itemSpansTwoCols
            ? "project-entry__double-column"
            : "project-entry__wrapper";

          const mobileImageSizes = {
            width: itemSpansTwoCols ? 412 : 204,
            height: itemSpansTwoCols ? 210 : 300,
          };
          const tabletImageSizes = {
            width: itemSpansTwoCols ? 976 : 486,
            height: itemSpansTwoCols ? 440 : 694,
          };

          const thumbnail = `${mobileThumbnail}?w=${mobileImageSizes.width * 2}&h=${mobileImageSizes.height * 2}&fit=crop&fm=webp`;
          const tabletThumbnail = `${mobileThumbnail}?w=${tabletImageSizes.width}&h=${tabletImageSizes.height}&fit=crop&fm=webp`;

          return (
            <a
              class={`project-entry ${className}`}
              style={{ color: "white" }}
              href={`/projects/${data.slug}`}
            >
              <div class="loader">
                <div class="lottie-container" />
              </div>
              <div
                class="video-container hover-area"
                data-hover-text="View project"
              >
                <video
                  class="project-video-media"
                  preload="metadata"
                  loop
                  muted
                  playsinline
                >
                  <source data-src={data.previewUrl} type="video/mp4" />
                  Your browser does not support the video tag.
                </video>
              </div>
              {/* <Image
                src={data.thumbnail}
                alt=""
                width={itemSpansTwoCols ? 440 : 510}
                height={itemSpansTwoCols ? 234 : 297}
                quality="90"
                class="project-image-media__mobile"
              /> */}
              <img
                src={thumbnail}
                alt=""
                width={mobileImageSizes.width}
                height={mobileImageSizes.height}
                loading="lazy"
                class="project-image-media__mobile hidden mobile-thumbnail"
              />
              <img
                src={tabletThumbnail}
                alt=""
                width={tabletImageSizes.width}
                height={tabletImageSizes.height}
                loading="lazy"
                class="project-image-media__tablet hidden tablet-thumbnail"
              />
              <div class="project-text">
                <span class="project-titleset">
                  {data.clientArray !== null && <p>{data.clientArray[0]}</p>}
                  <p>{data.title}</p>
                </span>
                <span class="project-titleset titleset-services">
                  <p>{data.servicesArray ? data.servicesArray[0] : null}</p>
                </span>
              </div>
            </a>
          );
        })
      }
    </div>
    <CornerTopLeft />
    <CornerTopRight />
    <CornerBottomLeft />
    <CornerBottomRight />
  </div>
  <Footer data={settingsData} />
</Layout>

<script>
  import lottie from "lottie-web";

  const isMobile = window.innerWidth <= 576;
  const isTablet = window.innerWidth > 576 && window.innerWidth <= 992;
  const projectEntries = document.querySelectorAll(".project-entry");

  projectEntries.forEach((entry, index) => {
    const video = entry.querySelector(".project-video-media");
    const mobileImage = entry.querySelector(".project-image-media__mobile");
    const tabletImage = entry.querySelector(".project-image-media__tablet");
    const loader = entry.querySelector(".loader");
    const lottieContainer = entry.querySelector(".lottie-container");

    // console.log(`Entry ${index}:`, {
    //   video: video ? "Found" : "Not found",
    //   image: image ? "Found" : "Not found",
    //   loader: loader ? "Found" : "Not found",
    //   lottieContainer: lottieContainer ? "Found" : "Not found",
    // });

    if (
      !loader ||
      !lottieContainer ||
      (!video && !mobileImage && !tabletImage)
    ) {
      console.error(`Missing elements in entry ${index}. Skipping.`);
      return;
    }

    let animation;
    try {
      animation = lottie.loadAnimation({
        container: lottieContainer,
        renderer: "svg",
        loop: true,
        autoplay: true,
        path: "/lottie.json",
      });
    } catch (error) {
      console.error(
        `Error loading Lottie animation for entry ${index}:`,
        error
      );
    }

    const hideLoader = () => {
      loader.classList.add("fade-out");
      loader.addEventListener(
        "animationend",
        () => {
          loader.style.display = "none";
          if (animation) {
            animation.stop();
          }
        },
        { once: true }
      );
    };

    if (isMobile) {
      // Mobile: Handle mobile image loading
      if (mobileImage) {
        mobileImage.classList.remove("hidden");
        if (mobileImage.complete) {
          mobileImage.classList.add("loaded");
          hideLoader();
        } else {
          mobileImage.addEventListener(
            "load",
            () => {
              mobileImage.classList.add("loaded");
              hideLoader();
            },
            { once: true }
          );
        }
      }
      // Hide video and tablet image for mobile
      if (video) video.style.display = "none";
      if (tabletImage) tabletImage.classList.add("hidden");
    } else if (isTablet) {
      // Tablet: Handle tablet image loading
      if (tabletImage) {
        tabletImage.classList.remove("hidden");
        if (tabletImage.complete) {
          tabletImage.classList.add("loaded");
          hideLoader();
        } else {
          tabletImage.addEventListener(
            "load",
            () => {
              tabletImage.classList.add("loaded");
              hideLoader();
            },
            { once: true }
          );
        }
      }
      // Hide video and mobile image for tablet
      if (video) video.style.display = "none";
      if (mobileImage) mobileImage.classList.add("hidden");
    } else {
      // Desktop: Handle video loading
      if (video) {
        const lazyLoadVideo = () => {
          const source = video.querySelector("source");
          if (source && source.dataset.src) {
            source.src = source.dataset.src;
            video.load();
          } else {
            console.warn(
              `Video source not found or missing data-src in entry ${index}`
            );
          }
        };

        const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              lazyLoadVideo();
              observer.unobserve(entry.target);
            }
          });
        });

        observer.observe(video);

        video.addEventListener(
          "canplay",
          () => {
            console.log(`Video in entry ${index} can play. Hiding loader.`);
            hideLoader();
          },
          { once: true }
        );

        video.addEventListener("mouseenter", () => video.play());
        video.addEventListener("mouseleave", () => video.pause());
      }

      // Hide mobile and tablet images for desktop
      if (mobileImage) mobileImage.classList.add("hidden");
      if (tabletImage) tabletImage.classList.add("hidden");
    }
  });
</script>

<style lang="scss">
  .lottie-container {
    width: 115px;
    // height: 250px;
    height: auto;
    color: white;
    // border: 1px solid red;
    margin: 0 auto; /* This centers the container horizontally */
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
  }
  .lottie-container svg {
    display: block;
    position: absolute;
    width: 100%;
    height: 100%;
    mix-blend-mode: difference;
  }
  .video-container {
    position: relative;
    width: 100%;
    height: 100%;
    border-radius: 20px;
    overflow: hidden;
    cursor: none;
  }

  .loader {
    position: absolute;
    z-index: 4;
    // height: 12px;
    // width: 60px;
    width: 100%;
    height: 100%;
    inset: 0;
    display: grid;
    place-items: center;
    // top: 50%;
    // left: 50%;
    // transform: translate(-50%, -50%);
    // --c: no-repeat linear-gradient(#fff 0 0);
    // background: var(--c), var(--c), var(--c), var(--c);
    // background-size: 26% 1px;
    // animation: l8 1s infinite;
    opacity: 1;
    transition: opacity 0.35s ease-out;
  }

  .loader.fade-out {
    animation: fadeOut 0.35s ease-out forwards;
  }

  @keyframes fadeOut {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }

  // @keyframes l8 {
  //   0%,
  //   70%,
  //   100% {
  //     background-position:
  //       calc(0 * 100% / 3) 50%,
  //       calc(1 * 100% / 3) 50%,
  //       calc(2 * 100% / 3) 50%,
  //       calc(3 * 100% / 3) 50%;
  //   }
  //   23.33% {
  //     background-position:
  //       calc(0 * 100% / 3) 100%,
  //       calc(1 * 100% / 3) 66%,
  //       calc(2 * 100% / 3) 33%,
  //       calc(3 * 100% / 3) 0;
  //   }
  //   46.67% {
  //     background-position:
  //       calc(3 * 100% / 3) 100%,
  //       calc(2 * 100% / 3) 66%,
  //       calc(1 * 100% / 3) 33%,
  //       calc(0 * 100% / 3) 0;
  //   }
  //   69.99% {
  //     background-position:
  //       calc(3 * 100% / 3) 50%,
  //       calc(2 * 100% / 3) 50%,
  //       calc(1 * 100% / 3) 50%,
  //       calc(0 * 100% / 3) 50%;
  //   }
  // }
  .mobile-thumbnail {
    display: none;
  }

  .tablet-thumbnail {
    display: none;
  }

  .project-video-media {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    z-index: 2;
    border-radius: 20px;
  }

  .project-entries-container {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    position: relative;
    width: 100%;
  }

  .project-grid__container {
    position: relative;
    display: flex;
    flex-wrap: wrap;
    width: calc(100% - 2rem);
    margin: 1rem auto;
    margin-bottom: 11rem;
  }

  .project-entry {
  }
  .project-entry__wrapper {
    border-radius: 20px;
    overflow: hidden;
    flex: 1;
    box-sizing: border-box;
    flex-basis: 33.1%;
    height: 50vh;
    width: 100%;
    transition: 0.8s cubic-bezier(0.77, 0, 0.175, 1);
    position: relative;
  }

  .project-entry__double-column {
    height: 70vh;
    width: 100%;
    flex: 1 1 100%;
    border-radius: 20px;
    overflow: hidden;
    position: relative;
  }

  .project-entry__wrapper:hover {
    transition: 0.8s cubic-bezier(0.77, 0, 0.175, 1);
    min-width: none;
    flex-grow: 500;
  }

  .project-text {
    position: absolute;
    bottom: 1.5vw;
    left: 1.5vw;
    z-index: 15;
  }

  .project-titleset {
    display: block;
    color: rgba(var(--rgb-white), 1);
  }

  .titleset-services {
    padding-top: 0.5rem;
    color: rgba(var(--rgb-white), 0.5);
  }

  @media (max-width: 1280px) {
    .project-entries-container {
      gap: 0.5rem;
    }
    .project-grid__container {
      gap: 0.5rem;
      width: calc(100% - 1rem);
      margin-top: 0.5rem;
    }
  }

  .project-image-media__mobile,
  .project-image-media__tablet {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: none;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  .project-image-media__mobile.loaded,
  .project-image-media__tablet.loaded {
    opacity: 1;
  }

  .project-image-media__mobile.hidden,
  .project-image-media__tablet.hidden {
    display: none;
  }

  @media (max-width: 992px) {
    .project-image-media__tablet {
      display: block;
    }
    .video-container {
      display: none;
    }
    .project-image-media__mobile {
      display: block;
      position: relative;
    }
    .project-video-media {
      display: none;
    }
    .project-entries-container {
      gap: 0.25rem;
    }
    .project-entry__wrapper {
      height: 70vw;
      border-radius: 6px;
    }
    .project-entry__double-column {
      border-radius: 6px;
      height: 440px;
    }

    .project-video-media {
      border-radius: 6px;
    }
    .lottie-container {
      width: 75px;
      height: auto;
    }
  }
  @media (max-width: 576px) {
    .project-image-media__mobile {
      display: block;
    }
    .project-image-media__tablet {
      display: none;
    }
    .project-entry__wrapper {
      height: 300px;
    }
    .project-entry__double-column {
      height: 210px;
    }
  }
</style>
