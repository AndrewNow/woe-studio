---
import { Image } from "astro:assets";
import Layout from "../../layouts/Layout.astro";
import { getStillsProjectsInOrder, getSiteSettings } from "../../sanity/api";
import CornerTopLeft from "../../components/cornerPieces/cornerTopLeft.astro";
import CornerTopRight from "../../components/cornerPieces/cornerTopRight.astro";
import CornerBottomLeft from "../../components/cornerPieces/cornerBottomLeft.astro";
import CornerBottomRight from "../../components/cornerPieces/cornerBottomRight.astro";
import Footer from "../../components/footer.astro";
import PageTransition from "../../components/pageTransition.astro";

const allProjectData = await getStillsProjectsInOrder();

const settingsData = await getSiteSettings();

const data = allProjectData?.stills;
---

<Layout
  title="Stills | WOE Studio"
  data={settingsData}
  description="Explore the Projects page of WOE (What On Earth). Discover our portfolio showcasing select projects from captivating commercials to compelling documentaries, see how our unique approach transforms ideas into impactful visuals."
>
  <PageTransition />
  <div class="stills-grid__container">
    <div class="stills-entries-container">
      {
        data.map((data, i) => {
          const mobileThumbnail = data.thumbnail;
          // New logic: Every 5th item (index 4, 9, 14, etc.) should span two columns
          const itemSpansTwoCols = (i + 1) % 5 === 0;
          const className = itemSpansTwoCols
            ? "stills-entry__double-column"
            : "stills-entry__wrapper";

          const mobileImageSizes = {
            width: itemSpansTwoCols ? 412 : 204,
            height: itemSpansTwoCols ? 210 : 300,
          };
          const tabletImageSizes = {
            width: itemSpansTwoCols ? 976 : 486,
            height: itemSpansTwoCols ? 440 : 694,
          };

          const thumbnail = `${mobileThumbnail}?w=${mobileImageSizes.width * 2}&h=${mobileImageSizes.height * 2}&fit=crop&fm=webp`;
          const tabletThumbnail = `${mobileThumbnail}?w=${tabletImageSizes.width}&h=${tabletImageSizes.height}&fit=crop&fm=webp`;

          return (
            <a
              class={`stills-entry ${className}`}
              style={{ color: "white" }}
              href={`/stills/${data.slug}`}
            >
              <div class="stills-loader">
                <div class="stills-lottie-container" />
              </div>
              <div
                class="stills-video-container hover-area"
                data-hover-text="View still"
              >
                <video
                  class="stills-video-media"
                  preload="metadata"
                  loop
                  muted
                  playsinline
                >
                  <source data-src={data.previewUrl} type="video/mp4" />
                  Your browser does not support the video tag.
                </video>
              </div>
              {/* <Image
                src={data.thumbnail}
                alt=""
                width={itemSpansTwoCols ? 440 : 510}
                height={itemSpansTwoCols ? 234 : 297}
                quality="90"
                class="stills-image-media__mobile"
              /> */}
              <img
                src={thumbnail}
                alt=""
                width={mobileImageSizes.width}
                height={mobileImageSizes.height}
                loading="lazy"
                class="stills-image-media__mobile hidden mobile-thumbnail"
              />
              <img
                src={tabletThumbnail}
                alt=""
                width={tabletImageSizes.width}
                height={tabletImageSizes.height}
                loading="lazy"
                class="stills-image-media__tablet hidden tablet-thumbnail"
              />
              <div class="stills-text">
                <span class="stills-titleset">
                  {data.clientArray !== null && <p>{data.clientArray[0]}</p>}
                  <p>{data.title}</p>
                </span>
                <span class="stills-titleset titleset-services">
                  <p>{data.servicesArray ? data.servicesArray[0] : null}</p>
                </span>
              </div>
            </a>
          );
        })
      }
    </div>
    <CornerTopLeft />
    <CornerTopRight />
    <CornerBottomLeft />
    <CornerBottomRight />
  </div>
  <Footer data={settingsData} />
</Layout>

<script>
  import lottie from "lottie-web";

  const isMobile = window.innerWidth <= 576;
  const isTablet = window.innerWidth > 576 && window.innerWidth <= 992;
  const stillsEntries = document.querySelectorAll(".stills-entry");

  console.log(`Found ${stillsEntries.length} stills entries`);
  console.log(
    `Device type: ${isMobile ? "Mobile" : isTablet ? "Tablet" : "Desktop"}`
  );

  stillsEntries.forEach((entry, index) => {
    const video = entry.querySelector(".stills-video-media");
    const mobileImage = entry.querySelector(".stills-image-media__mobile");
    const tabletImage = entry.querySelector(".stills-image-media__tablet");
    const stillsLoader = entry.querySelector(".stills-loader");
    const stillsLottieContainer = entry.querySelector(
      ".stills-lottie-container"
    );

    console.log(`Entry ${index}:`, {
      video: video ? "Found" : "Not found",
      mobileImage: mobileImage ? "Found" : "Not found",
      tabletImage: tabletImage ? "Found" : "Not found",
      stillsLoader: stillsLoader ? "Found" : "Not found",
      stillsLottieContainer: stillsLottieContainer ? "Found" : "Not found",
      videoSrc: video
        ? video.querySelector("source")?.dataset.src
        : "No video source",
      mobileImageSrc: mobileImage ? mobileImage.src : "No mobile image",
      tabletImageSrc: tabletImage ? tabletImage.src : "No tablet image",
    });

    if (
      !stillsLoader ||
      !stillsLottieContainer ||
      (!video && !mobileImage && !tabletImage)
    ) {
      console.error(`Missing elements in entry ${index}. Skipping.`);
      return;
    }

    let animation;
    try {
      animation = lottie.loadAnimation({
        container: stillsLottieContainer,
        renderer: "svg",
        loop: true,
        autoplay: true,
        path: "/lottie.json",
      });
      console.log(`Lottie animation loaded for entry ${index}`);
    } catch (error) {
      console.error(
        `Error loading Lottie animation for entry ${index}:`,
        error
      );
    }

    const hideLoader = () => {
      console.log(`Hiding loader for entry ${index}`);
      stillsLoader.classList.add("fade-out");
      stillsLoader.addEventListener(
        "animationend",
        () => {
          stillsLoader.style.display = "none";
          if (animation) {
            animation.stop();
          }
          console.log(`Loader hidden for entry ${index}`);
        },
        { once: true }
      );
    };

    if (isMobile) {
      console.log(`Entry ${index}: Mobile device - handling mobile image`);
      // Mobile: Handle mobile image loading
      if (mobileImage) {
        mobileImage.classList.remove("hidden");
        if (mobileImage.complete) {
          console.log(`Entry ${index}: Mobile image already loaded`);
          mobileImage.classList.add("loaded");
          hideLoader();
        } else {
          mobileImage.addEventListener(
            "load",
            () => {
              console.log(`Entry ${index}: Mobile image loaded`);
              mobileImage.classList.add("loaded");
              hideLoader();
            },
            { once: true }
          );
          mobileImage.addEventListener(
            "error",
            (e) => {
              console.error(`Entry ${index}: Mobile image failed to load:`, e);
            },
            { once: true }
          );
        }
      } else {
        console.warn(`Entry ${index}: No mobile image found`);
      }
      // Hide video and tablet image for mobile
      if (video) video.style.display = "none";
      if (tabletImage) tabletImage.classList.add("hidden");
    } else if (isTablet) {
      console.log(`Entry ${index}: Tablet device - handling tablet image`);
      // Tablet: Handle tablet image loading
      if (tabletImage) {
        tabletImage.classList.remove("hidden");
        if (tabletImage.complete) {
          console.log(`Entry ${index}: Tablet image already loaded`);
          tabletImage.classList.add("loaded");
          hideLoader();
        } else {
          tabletImage.addEventListener(
            "load",
            () => {
              console.log(`Entry ${index}: Tablet image loaded`);
              tabletImage.classList.add("loaded");
              hideLoader();
            },
            { once: true }
          );
          tabletImage.addEventListener(
            "error",
            (e) => {
              console.error(`Entry ${index}: Tablet image failed to load:`, e);
            },
            { once: true }
          );
        }
      } else {
        console.warn(`Entry ${index}: No tablet image found`);
      }
      // Hide video and mobile image for tablet
      if (video) video.style.display = "none";
      if (mobileImage) mobileImage.classList.add("hidden");
    } else {
      console.log(`Entry ${index}: Desktop device - handling video`);
      // Desktop: Handle video loading
      if (video) {
        const lazyLoadVideo = () => {
          const source = video.querySelector("source");
          if (source && source.dataset.src) {
            console.log(
              `Entry ${index}: Loading video from ${source.dataset.src}`
            );
            source.src = source.dataset.src;
            video.load();
          } else {
            console.warn(
              `Video source not found or missing data-src in entry ${index}`
            );
          }
        };

        const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              console.log(`Entry ${index}: Video is intersecting, loading...`);
              lazyLoadVideo();
              observer.unobserve(entry.target);
            }
          });
        });

        observer.observe(video);

        video.addEventListener(
          "canplay",
          () => {
            console.log(`Video in entry ${index} can play. Hiding loader.`);
            hideLoader();
          },
          { once: true }
        );

        video.addEventListener("error", (e) => {
          console.error(`Entry ${index}: Video failed to load:`, e);
        });

        video.addEventListener("mouseenter", () => video.play());
        video.addEventListener("mouseleave", () => video.pause());
      } else {
        console.warn(`Entry ${index}: No video found for desktop`);
      }

      // Hide mobile and tablet images for desktop
      if (mobileImage) mobileImage.classList.add("hidden");
      if (tabletImage) tabletImage.classList.add("hidden");
    }
  });
</script>

<style lang="scss">
  .stills-lottie-container {
    width: 115px;
    // height: 250px;
    height: auto;
    color: white;
    // border: 1px solid red;
    margin: 0 auto; /* This centers the container horizontally */
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
  }
  .stills-lottie-container svg {
    display: block;
    position: absolute;
    width: 100%;
    height: 100%;
    mix-blend-mode: difference;
  }
  .stills-video-container {
    position: relative;
    width: 100%;
    height: 100%;
    border-radius: 20px;
    overflow: hidden;
    cursor: none;
  }

  .stills-loader {
    position: absolute;
    z-index: 4;
    // height: 12px;
    // width: 60px;
    width: 100%;
    height: 100%;
    inset: 0;
    display: grid;
    place-items: center;
    // top: 50%;
    // left: 50%;
    // transform: translate(-50%, -50%);
    // --c: no-repeat linear-gradient(#fff 0 0);
    // background: var(--c), var(--c), var(--c), var(--c);
    // background-size: 26% 1px;
    // animation: l8 1s infinite;
    opacity: 1;
    transition: opacity 0.35s ease-out;
  }

  .stills-loader.fade-out {
    animation: fadeOut 0.35s ease-out forwards;
  }

  @keyframes fadeOut {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }

  // @keyframes l8 {
  //   0%,
  //   70%,
  //   100% {
  //     background-position:
  //       calc(0 * 100% / 3) 50%,
  //       calc(1 * 100% / 3) 50%,
  //       calc(2 * 100% / 3) 50%,
  //       calc(3 * 100% / 3) 50%;
  //   }
  //   23.33% {
  //     background-position:
  //       calc(0 * 100% / 3) 100%,
  //       calc(1 * 100% / 3) 66%,
  //       calc(2 * 100% / 3) 33%,
  //       calc(3 * 100% / 3) 0;
  //   }
  //   46.67% {
  //     background-position:
  //       calc(3 * 100% / 3) 100%,
  //       calc(2 * 100% / 3) 66%,
  //       calc(1 * 100% / 3) 33%,
  //       calc(0 * 100% / 3) 0;
  //   }
  //   69.99% {
  //     background-position:
  //       calc(3 * 100% / 3) 50%,
  //       calc(2 * 100% / 3) 50%,
  //       calc(1 * 100% / 3) 50%,
  //       calc(0 * 100% / 3) 50%;
  //   }
  // }
  .mobile-thumbnail {
    display: none;
  }

  .tablet-thumbnail {
    display: none;
  }

  .stills-video-media {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    z-index: 2;
    border-radius: 20px;
  }

  .stills-entries-container {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    position: relative;
    width: 100%;
  }

  .stills-grid__container {
    position: relative;
    display: flex;
    flex-wrap: wrap;
    width: calc(100% - 2rem);
    margin: 1rem auto;
    margin-bottom: 11rem;
  }

  .stills-entry {
  }
  .stills-entry__wrapper {
    border-radius: 20px;
    overflow: hidden;
    flex: 1;
    box-sizing: border-box;
    flex-basis: 33.1%;
    height: 50vh;
    width: 100%;
    transition: 0.8s cubic-bezier(0.77, 0, 0.175, 1);
    position: relative;
  }

  .stills-entry__double-column {
    height: 70vh;
    width: 100%;
    flex: 1 1 100%;
    border-radius: 20px;
    overflow: hidden;
    position: relative;
  }

  .stills-entry__wrapper:hover {
    transition: 0.8s cubic-bezier(0.77, 0, 0.175, 1);
    min-width: none;
    flex-grow: 500;
  }

  .stills-text {
    position: absolute;
    bottom: 1.5vw;
    left: 1.5vw;
    z-index: 15;
  }

  .stills-titleset {
    display: block;
    color: rgba(var(--rgb-white), 1);
  }

  .titleset-services {
    padding-top: 0.5rem;
    color: rgba(var(--rgb-white), 0.5);
  }

  @media (max-width: 1280px) {
    .stills-entries-container {
      gap: 0.5rem;
    }
    .stills-grid__container {
      gap: 0.5rem;
      width: calc(100% - 1rem);
      margin-top: 0.5rem;
    }
  }

  .stills-image-media__mobile,
  .stills-image-media__tablet {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: none;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  .stills-image-media__mobile.loaded,
  .stills-image-media__tablet.loaded {
    opacity: 1;
  }

  .stills-image-media__mobile.hidden,
  .stills-image-media__tablet.hidden {
    display: none;
  }

  @media (max-width: 992px) {
    .stills-image-media__tablet {
      display: block;
    }
    .stills-video-container {
      display: none;
    }
    .stills-image-media__mobile {
      display: block;
      position: relative;
    }
    .stills-video-media {
      display: none;
    }
    .stills-entries-container {
      gap: 0.25rem;
    }
    .stills-entry__wrapper {
      height: 70vw;
      border-radius: 6px;
    }
    .stills-entry__double-column {
      border-radius: 6px;
      height: 440px;
    }

    .stills-video-media {
      border-radius: 6px;
    }
    .stills-lottie-container {
      width: 75px;
      height: auto;
    }
  }
  @media (max-width: 576px) {
    .stills-image-media__mobile {
      display: block;
    }
    .stills-image-media__tablet {
      display: none;
    }
    .stills-entry__wrapper {
      height: 300px;
    }
    .stills-entry__double-column {
      height: 210px;
    }
  }
</style>
