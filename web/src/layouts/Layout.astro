---
import Nav from "../components/nav.astro";
const { title } = Astro.props;
import "../styles/global.css";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <main>
      <Nav />
      <slot />
      <div class="cursor-follower" id="cursor-follower">
        <div class="cursor-inner">
          <p>View Project</p>
        </div>
      </div>
    </main>
  </body>
</html>

<style is:global>
  .cursor-follower {
    position: fixed;
    top: 0;
    left: 0;
    pointer-events: none;
    z-index: 9999;
    contain: layout style size;
    display: flex;
    opacity: 0;
    /* transform: scale(0); */
    /* transform-origin: 0% 0%; */
    /* mix-blend-mode: difference; */
    /* transform: translate(-50%, -50%) scale(0); */

    & .cursor-inner {
      position: absolute;
      width: 150px;
      height: 150px;
      top: -75px;
      left: -75px;
      transform: scale(0);
      background-color: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(24px);
      /* mix-blend-mode: difference; */
      border: 2px solid var(--white);
      border-radius: 50%;
      color: var(--white);
      justify-content: center;
      align-items: center;
      text-align: center;
    }

    & p {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      display: block;
      height: 100%;
      width: 100%;
      display: grid;
      place-items: center;
    }
  }

  #gradient-canvas {
    width: 100%;
    height: 100%;
    --gradient-color-1: #ba00a7;
    --gradient-color-2: #155e89;
    --gradient-color-3: #9aeadd;
    --gradient-color-4: #00000050;
  }

  .link {
    color: var(--white);
    text-shadow: 0px 0px 2.3px #efeded;
  }

  .corner {
    z-index: 10;
    position: absolute;
    aspect-ratio: 1/1;
    width: 50px;
    height: auto;
  }
  .corner-top-left {
    top: -1px;
    left: -1px;
  }
  .corner-top-right {
    top: -1px;
    right: -1px;
    transform: rotate(90deg);
  }
  .corner-bottom-left {
    transform: rotate(-90deg);
    bottom: -1px;
    left: -1px;
  }
  .corner-bottom-right {
    transform: rotate(-180deg);
    bottom: -1px;
    right: -1px;
  }

  @media (max-width: 576px) {
    .corner {
      width: 20px;
    }
  }
</style>

<script src="../components/utils/cursor.js"></script>

<script>
  // import ScrambleText from "scramble-text";
  // const scrambleItems = document.querySelectorAll("#scramble");

  // scrambleItems.forEach((item) => {
  //   item.addEventListener("mouseenter", () => {
  //     console.log("firing");
  //     const scramble = new ScrambleText(item);
  //     scramble.play().start();
  //   });
  // });

  document.addEventListener("DOMContentLoaded", () => {
    const scrambleItems = document.querySelectorAll("#scramble");

    scrambleItems.forEach((item) => {
      const letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

      let interval = null;
      item.onmouseover = (event) => {
        let iteration = 0;

        clearInterval(interval);

        interval = setInterval(() => {
          event.target.innerText = event.target.innerText
            .split("")
            .map((letter, index) => {
              if (index < iteration) {
                return event.target.dataset.value[index];
              }

              return letters[Math.floor(Math.random() * 26)];
            })
            .join("");

          if (iteration >= event.target.dataset.value.length) {
            clearInterval(interval);
          }

          iteration += 1 / 3;
        }, 30);
      };
    });
  });
</script>
