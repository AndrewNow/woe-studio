---
const { data } = Astro.props;
import Image from "astro/components/Image.astro";
import logo from "../assets/woe-full.png";

const isIndexPage = Astro.url.pathname == "/";
---

<div class="timer__parent">
  <div class="timer__container">
    {
      isIndexPage && (
        <Image
          src={logo}
          alt="WOE Studio logo"
          width="575"
          height="28"
          quality="90"
          loading="eager"
          class="woe-logo"
        />
      )
    }
    <div class="timer__wrapper">
      {
        data &&
          data.slice(0, 6).map((video) => {
            return (
              <a class="timer-item" href={`/projects/${video.slug}`}>
                <p>{video.title}</p>
                <p>{video.clientArray ? video.clientArray : ""}</p>
                <div class="timer-countdown">
                  <div class="timer-countdown__progress" />
                </div>
              </a>
            );
          })
      }
    </div>
  </div>
</div>

<style>
  .woe-logo {
    /* margin-left: 3rem; */
    margin-bottom: 1.5vw;
    aspect-ratio: 511/25;
    max-width: 527px;
    height: auto;
    /* width: 100%; */
  }
  .timer__parent {
    z-index: 10;
    position: absolute;
    bottom: 3rem;
    padding: 0rem;
    left: 0rem;
    display: inline-flex;
    justify-content: space-between;
    align-items: end;
    margin-left: 3rem;
  }
  .timer__container {
    position: relative;
    width: 100%;
    /* max-width: 575px; */
  }
  .timer__wrapper {
    color: var(--white);
    display: grid;
    gap: 1rem;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(2, 1fr);
  }

  .timer-item {
    text-decoration: none;
    color: var(--white);
    /* width: 165px; */
    position: relative;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    transition: 0.5s all ease;
    & p {
      transition: 0.35s all ease;
    }
  }
  .timer-countdown {
    position: relative;
    width: 100%;
    margin-top: 0.5rem;
    height: 1px;
    background-color: rgba(var(--rgb-white), 0.5);
  }
  .timer-countdown__progress {
    transition: transform 5s linear;
    will-change: transform;
    transform-origin: left;
    background-color: rgba(var(--rgb-white), 1);
    height: 1px;
    width: 100%;
    transform: scaleX(0) translateY(0px);
  }

  @media (max-width: 992px) {
    .woe-logo {
      display: none;
    }
    .timer__parent {
      bottom: 1rem;
      margin-left: 1rem;
    }
    .timer__wrapper {
      width: 100%;
      color: var(--white);
      display: flex;
      flex-direction: column;
      gap: 0rem;
      height: calc(
        (54px * 3) - 1rem
      ); /* make this 3x the height of a .timer-item. 54px = 30px + 1.5rem. subtract 1.5rem because we want the last item (when the timer starts) to align to the bottom */
      overflow: hidden;
    }
    .timer-item {
      width: 150px;
      will-change: transform;
      min-height: 30px;
      margin-bottom: 1.5rem;
    }
    .timer-countdown {
      margin-top: 0.5rem;
    }
  }
</style>

<script>
  const runTimer = () => {
    const timerItems = document.querySelectorAll(".timer-item");
    const timerVideoArr = document.querySelectorAll("#timer-video");
    const timerVideoParentArr = document.querySelectorAll(
      "#timer-video-parent"
    );

    const duration = 5000; // Duration of each video in milliseconds
    let currentIndex = 0;
    let timerInterval;

    const updateTimer = () => {
      // console.log("Updating timer, currentIndex:", currentIndex);

      const resetAllVideos = () => {
        timerVideoParentArr.forEach((parent, i) => {
          const childVideo = parent.querySelector("video");
          childVideo.pause();
          childVideo.currentTime = 0;
          childVideo.load(); // Reload the video
          parent.style.display = "none";
          parent.style.opacity = "0";
        });
      };

      if (currentIndex >= timerItems.length) {
        resetAllVideos();
        resetTimerPosition();
        currentIndex = 0;

        // Preload the first video
        const firstVideo = timerVideoParentArr[0].querySelector("video");
        firstVideo.load();

        // Add a small delay before restarting the loop
        setTimeout(() => {
          updateTimer();
        }, 100);
        return;
      }

      timerVideoParentArr.forEach((parent, i) => {
        const childVideo = parent.querySelector("video");

        if (i == currentIndex) {
          parent.style.display = "block";
          parent.style.opacity = "1";
          console.log(`Playing video ${i}`);

          // Ensure video is ready before playing
          if (childVideo.readyState >= 3) {
            childVideo
              .play()
              .catch((e) => console.error("Error playing video:", e));
          } else {
            childVideo.addEventListener(
              "canplay",
              () => {
                childVideo
                  .play()
                  .catch((e) => console.error("Error playing video:", e));
              },
              { once: true }
            );
          }
        } else {
          parent.style.opacity = "0";
          setTimeout(() => {
            parent.style.display = "none";
            childVideo.pause();
            childVideo.currentTime = 0;
          }, 510);
        }
      });

      // Reset the previous element's progress bar state
      if (currentIndex < timerItems.length) {
        const currentProgress = timerItems[currentIndex].querySelector(
          ".timer-countdown__progress"
        );
        currentProgress.style.transform = "scaleX(1) translateY(0px)";

        timerItems.forEach((item, i) => {
          const currentTextElements = item.querySelectorAll("p");
          if (i === currentIndex) {
            currentTextElements[0].style.opacity = "1";
            currentTextElements[1].style.opacity = ".75";
          } else {
            currentTextElements.forEach((el) => {
              el.style.opacity = "0.5";
            });
          }
        });

        const prevIndex =
          currentIndex === 0 ? timerItems.length - 1 : currentIndex - 1;
        const prevProgress = timerItems[prevIndex].querySelector(
          ".timer-countdown__progress"
        );
        prevProgress.style.transform = "scaleX(0)";
        prevProgress.style.transitionDuration = "0s";
        prevProgress.offsetHeight;
        prevProgress.style.transitionDuration = "5s";
      }

      if (currentIndex > 0) {
        translateTimerUpwards();
      }

      currentIndex++;
    };

    const resetTimerPosition = () => {
      if (window.innerWidth < 992) {
        timerItems.forEach((item) => {
          item.style.transform = `translateY(0)`;
        });
      }
    };

    const translateTimerUpwards = () => {
      if (window.innerWidth < 992) {
        timerItems.forEach((item) => {
          const currentTranslation = item.style.transform.match(
            /translateY\(([^)]+)\)/
          );
          const currentOffset = currentTranslation
            ? parseFloat(currentTranslation[1])
            : 0;
          item.style.transform = `translateY(${currentOffset + -54}px)`;
        });
      }
    };

    const startTimer = () => {
      if (timerInterval) clearInterval(timerInterval);
      timerInterval = setInterval(updateTimer, 5000); // Changed from 2500 to 5000
      updateTimer(); // Run the timer immediately
    };

    // Check if we're on the homepage
    const isHomepage =
      window.location.pathname === "/" ||
      window.location.pathname === "/index.html";

    if (isHomepage) {
      const loaderWrapper = document.getElementById("loaderWrapper");
      const userHasVisited = sessionStorage.getItem("visited");

      if (userHasVisited || !loaderWrapper) {
        // If user has visited before or there's no loader, start the timer immediately
        startTimer();
      } else {
        // If it's the user's first visit and there's a loader, wait for the loader to finish
        const loaderVideo = document.getElementById("loaderVideo");
        loaderVideo.addEventListener(
          "ended",
          () => {
            // Start the timer when the loader video ends
            startTimer()
          },
          { once: true }
        );
      }
    } else {
      // If not on homepage, start the timer immediately
      startTimer();
    }
  };

  // Call the function to initialize the timer setup
  runTimer();
</script>
